#!/usr/bin/ruby 

require 'csv'
require 'nokogiri'
require 'json'

list = []
list = JSON.parse(File.read(ARGV[0])) if ARGV[0]

#input = `curl 'https://weather.com/weather/hourbyhour/l/94060:4:US' 2>/dev/null`
#input = `curl 'https://weather.com/weather/hourbyhour/l/77550:4:US' 2>/dev/null`
input = `curl 'https://weather.com/weather/hourbyhour/l/USCA0564:1:US' 2>/dev/null`
#input = `curl 'https://www.weatherforyou.com/tides/tides.php?place=pescadero%2c+CA&month=#{ARGV[0]}&year=#{ARGV[1]}' 2>/dev/null`

document = Nokogiri::HTML(input)
TIME = 1
DESCRIPTION = 2
TEMP = 3
FEELS = 4
PRECIP = 5
HUMIDITY = 6
WIND = 7

#puts 'Bad Document' if !document
#puts 'found table stuff' if document.css('twc-table').css('tbody')
#puts 'Bad Document At' if !document.at('table')

def exit_error msg
  abort(msg)
end

def conditions description
  value = 0
  if description =~ /shower/i || description =~ /rain/i
    value = 8
    value = 7 if description =~ /mostly/i
    value = 6 if description =~ /few/i
    value = 6 if description =~ /part/i
  end
  if description =~ /cloud/i || description =~ /fog/i
    value = 5
    value -= 1 if description =~ /mostly/i
    value -= 2 if description =~ /partly/i
  end
  if description =~ /clear/i || description =~ /sun/i
    value = 0
    value += 1 if description =~ /mostly/i
    value += 2 if description =~ /partly/i
  end
  return value
end


document.at('table').search('tr').each do |row|

#  next if (counter += 1) < 2

  cells = row.search('th, td').map { |cell| cell.text.strip }

#  print cells
  cell_hash = {}

# time looks like this "2:00 am\nTue"
#  cell_hash['Time'] = cells[TIME]
  time = cells[TIME].split(':')
  next if !time[1]

  hours = time[0].to_i
  am = time[1].split(' ')[1].split("\n")[0]

  if am =~ /am/i
    if hours == 12
      hours = 0
    end
  else
    if hours != 12
        hours = hours + 12
    end
  end
  cell_hash['Time'] = hours*100

#   "Time": 100,

  cell_hash['Description'] = cells[DESCRIPTION]
  cell_hash['Condition'] = conditions(cells[DESCRIPTION])
#   "Temperature": "49\u00b0",
  exit_error "Bad temperature format: #{cells[TEMP]}" if cells[TEMP] !~ /(\d.*)/
  cell_hash['Temperature'] = $1.to_i

#   "Feels": "46\u00b0",
  exit_error "Bad feels format: #{cells[FEELS]}" if cells[FEELS] !~ /(\d.*)/
  cell_hash['Feels'] = $1.to_i
  
#   "Precipitation": "10%",
  exit_error "Bad precipitation format: #{cells[PRECIP]}" if cells[PRECIP] !~ /(\d.*)/
  cell_hash['Precipitation'] = $1.to_i

#   "Humidity": "90%",
  exit_error "Bad humidity format: #{cells[HUMIDITY]}" if cells[HUMIDITY] !~ /(\d.*)/
  cell_hash['Humidity'] = $1.to_i

#   "Wind": "N 7 mph"
  if cells[WIND] =~ /calm/i
    cell_hash['Wind'] = { :Direction => "N", :Speed => 0 }
  else
    exit_error "Bad wind format: #{cells[WIND]}" if cells[WIND] !~ /(.*) (\d.*) mph/
    cell_hash['Wind'] = { :Direction => $1, :Speed => $2.to_i }
  end

  entry = nil
  list.each { | e | entry = e if e['Time'] == cell_hash['Time'] }

  if entry
#    print "updating #{cell_hash['Time']}\n"
    entry['Description'] = cell_hash['Description']
    entry['Condition'] = cell_hash['Condition']
    entry['Temperature'] = cell_hash['Temperature']
    entry['Feels'] = cell_hash['Feels']
    entry['Precipitation'] = cell_hash['Precipitation']
    entry['Humidity'] = cell_hash['Humidity']
    entry['Wind'] = cell_hash['Wind']
  else
#    print "appending #{cell_hash['Time']}\n"
    list << cell_hash
#    list[hours] = cell_hash
  end

end

new_list = []
tmp_line = list.last.dup
(0..23).each do | i |
  entry = list.select { | e | e['Time'] == i*100 }
  if !entry || entry.size == 0
    tmp_line[:Time] = i*100
#      list << tmp_line
    new_list[i] = tmp_line
    new_list[i]["Condition"] ||= 0
    tmp_line = list.last.dup
  else
    new_list[i] = entry[0]
  end
end

#puts list.sort_by { |e| e['Time'] }.to_json
#puts list.sort!{ |e, f| e['Time'] <=> f['Time'] }.to_json
puts new_list.to_json
