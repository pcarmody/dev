#!/usr/bin/ruby

require 'json'
require 'nokogiri'

input = `curl 'https://www.tide-forecast.com/locations/Ano-Nuevo-Island-California/tides/latest' `

document = Nokogiri::HTML(input)

list = []
line = nil
day = nil

TIME = 0
PDT = 1
MEASURE_METERS = 2
MEASURE_FEET = 3
DESCRIPTION = 4

document.at('table').search('tr').each do |row|
  cells = row.search('th, td').map { |cell| cell.text.strip.chomp }

  if (cells[0] =~ /(.*day) (\d*) (.*)/i)

    day ||= $2.to_i  # initialize day the first time that we see it.
    list[day] = line
    line = {}
#    line[:MoonRise] = 0
#    line[:MoonSet] = 0
    day = $2.to_i
    line[:Day] = $1
    line[:Date] = $2.to_i
    line[:Month] = $3
    [' ', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sep', 'Nov', 'Dec'].each_with_index { | m, i | line[:Month] = i if m == $3 }
    
    cells.shift

  end

  cells[TIME] =~ /(\d*):(\d*) (.*)/
  hours = $1.to_i
  minutes = $2.to_i
  am_pm = $3

  if (am_pm =~ /pm/i)
    if (hours != 12)
      hours = hours + 12
    end
  else
    if(hours == 12)
      hours = 0
    end
  end

  time = hours*100 + minutes

  case cells[DESCRIPTION]
  when /Sunrise/
    line[:SunRise] = time
  when /Sunset/
    line[:SunSet] = time
  when /Moonrise/
    line[:MoonRise] = time
  when /Moonset/ 
    line[:MoonSet] = time
  when /High Tide/
    line[:HighTide] ||= []
    cells[MEASURE_METERS] =~ /(\d*)\.(\d)(\d)/
    height = $1.to_i*100 + $2.to_i*10 + $3.to_i
    height = height * -1 if cells[MEASURE_METERS][0] == '-'
    line[:HighTide] << { :Time => time, :Height => height }
  when /Low Tide/
    line[:LowTide] ||= []
    cells[MEASURE_METERS] =~ /(\d*)\.(\d*)/
    height = $1.to_i*10 + $2.to_i
    height = height * -1 if cells[MEASURE_METERS][0] == '-'
    line[:LowTide] << { :Time => time, :Height => height }
  else
    line[:Special] = cells[DESCRIPTION]
  end
#  { :SunRise => sun_rise, :SunSet => sun_set, :MoonRise => moon_rise, :MoonSet => moon_set, :Moon_Rel =>moon_rel, :Delta => delta }
end

list[day] = line

#
#  verify the data
#

list.each do | e |

  next if !e

  if e[:HighTide].size <= 1
    second = e[:HighTide].first.dup
    second[:Time] = (second[:Time] + 1200) % 2400
    e[:HighTide] << second
  end

  if e[:LowTide].size <= 1
    second = e[:LowTide].first.dup
    second[:Time] = (second[:Time] + 1200) % 2400
    e[:LowTide] << second
  end
    
  e[:MoonRise] = 0 if !e[:MoonRise]
  e[:MoonSet] = (e[:MoonRise] + 1200) % 2400 if !e[:MoonSet]

end

puts list.sort_by { |e| 
  if e.is_a?(::Hash) 
    e[:Month]*100 + e[:Date] 
  else
    1231 
  end
}.to_json
